{"version":3,"sources":["components/views/styles/Homepage.module.css","components/views/styles/CoursesSelectedList.module.css","components/views/styles/CourseSelected.module.css","components/views/styles/OptionsMainList.module.css","components/views/styles/OptionMainButton.module.css","components/views/course.js","components/views/form.js","components/views/CourseSelected.js","components/views/CoursesSelectedList.js","components/views/CourseNameRecommendation.js","components/views/OptionMainButton.js","components/views/OptionsMainList.js","components/Homepage.js","App.js","index.js"],"names":["module","exports","Course","props","course_name","newName","this","id","name","React","Component","CourseSelected","event","preventDefault","className","style","course","courseID","CoursesSelectedList","container","selectedCourses","map","onClick","handleGenerate","CourseNameRecommendation","console","log","state","recommendedCourseIDs","listCourseIDs","courseIDsRecommended","undefined","courseIDLength","length","courseIDsMatchingFirstLetter","index","currentCourseIDMatching","substr","i","push","currentInput","recommendSearch","key","value","OptionMainButton","option","button","OptionsMainList","Homepage","handleAdd","bind","firstLetter","listMatches","exists","nameField","document","getElementById","toUpperCase","checkCourseID","arrayJoined","concat","setState","getListCourseIDs","process","fetch","then","response","json","result","status","mapCourseIDs","list_courseids","error","mapAlphabetical","type","containerInput","onSubmit","onChange","list","courseInput","autoComplete","placeholder","courseSubmit","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.a77de99d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Homepage_container__cwfji\",\"containerInput\":\"Homepage_containerInput__2lEJ8\",\"courseInput\":\"Homepage_courseInput__1Wo5U\",\"courseSubmit\":\"Homepage_courseSubmit__3ylg9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CoursesSelectedList_container__1Tmkz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"course\":\"CourseSelected_course__3NBu-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"OptionsMainList_container__1lS8U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"OptionMainButton_button__3s6JW\"};","import React from 'react';\nimport './styles/course.css'\nclass Course extends React.Component {\n    constructor(props) {\n        super(props);\n        this.course_name = \"\";\n    }\n    setCourseName( newName) {\n        this.course_name = newName;\n    }\n    render() {\n        return(\n        <div id = \"course_box\">\n            <center>\n                <div id = \"course_name\">\n                    <div>\n                        {this.props.name}\n                    </div>\n                </div>\n            </center>\n        </div>\n        );\n    }\n}\n\nexport default Course;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Course from './course.js';\nimport './styles/form.css';\n\nvar chosen_courses = []\nvar chosen_courses_info = []\n\nvar course = {\n    courseName: \"courseName\",\n    information: \"\"\n}\n\n//Form to take user's course preferences\nclass Form extends React.Component {\n    constructor(props) {\n        super(props);\n        this.size = 0;\n        this.state = { courseNames: [], course: '', coursesInfo: []};\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    //make API call and add course if it exists\n    addCourse(API_URL, callback) {\n        fetch(API_URL)\n            .then(\n                (response) => response.json()\n            )\n            .then(result => {\n                //if the request is valid\n                if (result.status == \"200\") {\n                    //modify the selected courses and selected courses info state arrays\n                    this.setState( state => {\n                        const coursesInfo = this.state.coursesInfo.concat(result.data);\n                        const courseNames = this.state.courseNames.concat(this.state.course);\n                        return {\n                            coursesInfo,\n                            courseNames\n                        };\n                    });\n                    this.size++;\n                    callback();\n                }\n            }, \n            (error) => {\n                console.log(\"error\", error);\n            });\n    }\n\n    handleChange(event) {\n        this.setState( {course: event.target.value} );\n    }\n    //when the \"Search\" button is clicked\n    async handleSubmit(event) {\n        //prevent default event handler\n        event.preventDefault();\n        //add the course query to the base URL\n        var API_URL = process.env.REACT_APP_API_URL + \"/course/?course=\" + this.state.course;\n\n        //send API call to database, add course if it exists\n        this.addCourse(API_URL, () => {\n            console.log(this.state.coursesInfo);\n        });\n    }\n    //in url, %20 means a space in keyword\n    render() {\n        return (\n                <div>\n                    <h1> Choose your courses </h1>\n                    <div id = \"course_selection_prompt\">\n                        <form onSubmit = {this.handleSubmit}>\n                            <label>\n                            Course Name:\n                            <input\n                            type = \"text\"\n                            id = \"course_form\"\n                            onChange = {this.handleChange}\n                            />\n                            \n                            </label>\n                            <input \n                            type=\"submit\" \n                            value=\"Search\" \n                            id = \"form_submit\"\n                            />\n                        </form>\n                        <h2> You chose: </h2>\n                        <ul>\n                            {this.state.courseNames.map(item => {\n                                return <Course name = {item} key = {item.toString()}></Course>;\n                                })}\n                        </ul>\n                    </div>\n                    <button id = \"form_complete\">\n                        Those are all the courses!\n                    </button>\n                </div>\n        );\n    }\n}\n\nexport default Form;","import React from 'react';\nimport style from './styles/CourseSelected.module.css';\n\nclass CourseSelected extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleSubmit(event) {\n        //prevent default event handler\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <div className={style.course}>\n                {this.props.courseID}\n            </div>\n        );\n    }\n}\n\nexport default CourseSelected;","import React from 'react';\nimport style from './styles/CoursesSelectedList.module.css';\nimport CourseSelected from './CourseSelected.js';\nclass CoursesSelectedList extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className = {style.container} id = \"coursesSelectedList\">\n                <h1>Your selected courses</h1>\n                <div>\n                    {this.props.selectedCourses.map(function (courseID) {\n                        return <CourseSelected courseID = {courseID}></CourseSelected>\n                    })}\n                </div>\n                <button onClick = {this.props.handleGenerate} >Generate</button>\n            </div>\n        );\n    }\n}\n\nexport default CoursesSelectedList;","import React from 'react';\n//import style from './styles/CourseNameRecommendation.module.css';\n\n\nclass CourseNameRecommendation extends React.Component {\n    \n    constructor (props) {\n        super(props);\n        console.log(\"render\");\n\n        this.state = {\n            recommendedCourseIDs: null\n        }\n    }\n    // O(k) where k is length of courseID\n    recommendSearch(listCourseIDs, courseID) {\n        var courseIDsRecommended = [];\n\n        if (courseID != undefined || courseID != null) {\n            // recommend if there is at least one character in input\n            if (courseID[0] != undefined) {\n                let courseIDLength = courseID.length;\n                let firstLetter = courseID[0];\n\n\n                // check there is a course that matches the first letter of user input\n                var courseIDsMatchingFirstLetter = listCourseIDs[firstLetter];\n                if (courseIDsMatchingFirstLetter != undefined) {\n\n                    // iterate over every course ID with first letter matching input\n                    for (let index = 0; index < courseIDsMatchingFirstLetter.length; index++) {\n                        let currentCourseIDMatching = courseIDsMatchingFirstLetter[index];\n\n                        // if the beginning substring of matched Course ID is equal to the input, recommend course id\n                        let substr = \"\";\n                        for (let i = 0; i < courseIDLength; i++) {\n                            substr += currentCourseIDMatching[i];\n                        }\n\n                        if (substr == courseID) {\n                            courseIDsRecommended.push(courseIDsMatchingFirstLetter[index]);\n\n                            // cap recommendation to reduce lag\n                            if (courseIDsRecommended.length > 20)\n                                break\n                        }\n\n                    }\n\n                    if (courseIDsRecommended.length == 1) {\n                        courseIDsRecommended = [];\n                    }\n\n                }\n                //console.log(courseIDsRecommended);\n            }\n            else {\n                courseIDsRecommended = [];\n            }\n        }\n        else {\n            courseIDsRecommended = [];\n        }\n\n        return courseIDsRecommended\n    }\n\n    render() {\n        let currentInput = this.props.currentInput;\n        let listCourseIDs = this.props.listCourseIDs;\n        console.log(\"rendeing\")\n        var recommendedCourseIDs = this.recommendSearch(listCourseIDs, currentInput);\n        // if (this.props.currentInput.length > 2) {\n        //     console.log(this.props.currentInput)\n        // }\n        // else {\n        //     console.log(this.props.currentInput)\n        //     recommendedCourseIDs = this.recommendSearch(this.state.recommendedCourseIDs, currentInput);\n        //     this.setState({ recommendedCourseIDs: recommendedCourseIDs });\n        // }\n\n        console.log(recommendedCourseIDs);\n\n        return(\n            <datalist id=\"recommendedCourseIDs\">\n                {recommendedCourseIDs.map(function (id) {\n                    return <option key={id} value={id} ></option>\n                })}\n            </datalist>\n        );\n    }\n\n}\nexport default CourseNameRecommendation;","import React from 'react';\nimport style from './styles/OptionMainButton.module.css';\n\nclass OptionMainButton extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            option: \"default\"\n        };\n    }\n\n    handleSubmit(event) {\n        //prevent default event handler\n        event.preventDefault();\n    }\n    render() {\n        return (\n            <button className={style.button}>\n                {this.state.option}\n            </button>\n        );\n    }\n}\n\nexport default OptionMainButton;","import React from 'react';\nimport style from './styles/OptionsMainList.module.css';\nimport OptionMainButton from './OptionMainButton.js';\n\nclass OptionsMainList extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleSubmit(event) {\n        //prevent default event handler\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <div className={style.container}>\n                <OptionMainButton></OptionMainButton>\n                <OptionMainButton></OptionMainButton>\n                <OptionMainButton></OptionMainButton>\n            </div>\n        );\n    }\n}\n\nexport default OptionsMainList;","import React from 'react';\nimport CoursesSelectedList from './views/CoursesSelectedList.js';\nimport CourseNameRecommendation from './views/CourseNameRecommendation';\nimport OptionsMainList from './views/OptionsMainList.js';\nimport style from './views/styles/Homepage.module.css';\n\nclass Homepage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            listCourseIDs: null, // all course IDs in semester catalog (mapped first letter)\n            currentInput: null,\n            recommendedCourseIDs: null,\n            selectedCourses: []\n        }\n\n        this.handleAdd = this.handleAdd.bind(this);\n        this.recommendSearch = this.recommendSearch.bind(this);\n    }\n\n    // O(n)\n    checkCourseID(courseID) {\n        if (courseID != \"\") {\n            let firstLetter = courseID[0];\n            let listMatches = this.state.listCourseIDs[firstLetter];\n            if (listMatches != undefined) {\n                let exists = false;\n                for (let index in listMatches) {\n                    if (listMatches[index] == courseID)\n                        exists = true;\n                }\n                return exists;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n\n    handleAdd(event) {\n        //prevent default event handler\n        event.preventDefault();\n\n        let nameField = document.getElementById(\"input\");\n        let name = nameField.value.toUpperCase(); // get user input\n\n        // Check existence of user input and UPDATE STATE selectedCourses \n        if (this.checkCourseID(name)) {\n            var arrayJoined = this.state.selectedCourses.concat(name);\n            this.setState({ selectedCourses: arrayJoined });\n        }\n\n        nameField.value = \"\";\n    }\n\n    handleGenerate() {\n        var selectedCourses = this.state.selectedCourses;\n        console.log(\"handling generate\");\n    }\n\n    componentDidMount() {\n        // initialize {listCourseIDs} in this component's state\n        this.getListCourseIDs();\n    }\n    \n    async getListCourseIDs() {\n        var API_URL = process.env.REACT_APP_API_URL + \"/courses/list\";\n        fetch(API_URL)\n            .then(\n                (response) => response.json()\n            )\n            .then(result => {\n                //if the request is valid\n                if (result.status === \"200\") {\n                    this.mapCourseIDs(result.list_courseids);\n                }\n            },\n            (error) => {\n                console.log(\"error\", error);\n        });\n    }\n\n    // O(n)\n    mapCourseIDs(list_courseids) {\n        var mapAlphabetical = {};\n        for (let index in list_courseids) {\n            let firstLetter = list_courseids[index][0];\n\n            if (mapAlphabetical[firstLetter] == undefined) {\n                mapAlphabetical[firstLetter] = [];\n            }\n\n            mapAlphabetical[firstLetter].push(list_courseids[index]);\n        }\n        //initialize {listCourseIDs} with list of all course ids\n        this.setState({\n            listCourseIDs: mapAlphabetical\n        });\n    }\n\n    /* CourseID input scripts */\n\n    /* TODO: improve coverage beyond first letter */\n    /* TODO: move script to recommendation */\n    /* recommendSearch() is defined in this compoenent because \n    it is the event listener for input change*/\n    async recommendSearch() {\n        let nameField = document.getElementById(\"input\");\n        let name = nameField.value.toUpperCase(); // get user input\n\n        this.setState((state) => ({ currentInput: name })); // update state (currentInput)\n    }\n\n    // todo: link\n    handleChange() {\n        let nameField = document.getElementById(\"input\");\n        let name = nameField.value.toUpperCase(); // get user input\n        let nameLength = name.length;\n        this.setState((state) => ({ currentInput: name })); // update state (currentInput)\n    }\n\n\n    render() {\n        /* asynchronously render home page after getting courseIDs*/\n        if (this.state.listCourseIDs == null) {\n            // render loading state...\n            return (\n                <div className={style.container}>\n                    Loading...\n                </div>\n            );\n        }\n        else {\n            // render real UI..\n                return (\n                    <div className={style.container}>\n                        <CoursesSelectedList handleGenerate = {this.handleGenerate.bind(this)} selectedCourses={this.state.selectedCourses}>\n                            <input type = \"submit\"></input>\n                        </CoursesSelectedList>\n                        <div className={style.containerInput}>\n                            <h1>Choose a course</h1>\n                            <div>\n                                <form onSubmit={this.handleAdd}>\n                                    <div>\n                                        <input onChange={this.recommendSearch} list='recommendedCourseIDs' id=\"input\" className={style.courseInput} type=\"text\" autoComplete=\"off\" placeholder=\"COMP-0015\" />\n                                        <CourseNameRecommendation listCourseIDs = {this.state.listCourseIDs} currentInput = {this.state.currentInput}></CourseNameRecommendation>\n                                    </div>\n                                    <div>\n                                        <input className={style.courseSubmit} type=\"submit\" value=\"Add\" />\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                        <OptionsMainList></OptionsMainList>\n                    </div>\n                );\n        }\n    }\n}\n\nexport default Homepage;","import React from 'react';\nimport Form from \"./components/views/form.js\"\nimport Homepage from \"./components/Homepage.js\";\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\nexport default class App extends React.Component {\n\n    render() {\n        //return <Form/>;\n        return <Homepage/>;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}